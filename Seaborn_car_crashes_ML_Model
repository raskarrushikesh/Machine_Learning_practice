# load dataset from seaborn

import seaborn as sns
print(sns.get_dataset_names())

# Load data set using pandas

import pandas as pd

df=pd.DataFrame(sns.load_dataset('car_crashes'))
df.head()

# check size
df.shape

# check for missing values

df.isna().sum()

Case I: u will get separate train and test file
Case II: u have single file
then we need to split the data into training and testing (80-20) or (70-30)

# Training set
print(51*.8)

# lets create input and output data
X= df.loc[:,'speeding':'ins_losses']
X

y=df['total']
y[:2]

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=.8,random_state=42)

len(X_train) # no.of records in traininglen(X_train) # no.of records in training

X_train[:3]

len(X_test) # no.of records in testing

# training

from sklearn.linear_model import LinearRegression
model=LinearRegression()
model

# supply X_train,y_train
model.fit(X_train,y_train)

# testing
y_pred=model.predict(X_test)
y_pred # predicated result

# check data accuracy
model.score(X_train,y_train)*100

model.score(X_test,y_test)*100

Performance metrics/measures
MAE: Mean Absolute error
MSE: Mean Squared error
RMSE: Root MSE
r2 score: measures how good ur model is

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

mean_absolute_error(y_test,y_pred)

mean_squared_error(y_test,y_pred) # analyze larger error

# RMSE
import numpy as np
np.sqrt(mean_squared_error(y_test,y_pred))

r2_score(y_test,y_pred) # it ranges between 0-1 more it close to 1 represent ur model is good

df.describe().T

for viewing code: 
https://python-fiddle.com/saved/309fe8c9-7eb1-4963-868a-83258b8bc89b
